#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "ExprTree.h"
#include "Parser.h"
#include "CallStack.h"

#include <ctype.h>
#include <vector>
#include <stack>

/*

TODO:
    [x] чтение дерева из инфиксной нотации
    [x] переделать поле data в какой-нибудь темплейт (было просто копирование строк)
    [x] добавить парсер из строки в структуру
    [x] сделать парсер стандартных арифметических выражений
    [x] написать генератор теха
    [x] написать упрощение дерева: проброска констант + уничтожение эквивалетных действий
    [x] реализовать хранение чисел в double
    [x] добавить стандартные функции sin,cos,tan,cot,ln
    [x] добавить приоритет стандартным функциям
    [ ] реализовать стандартную функцию извелечения корня ( у \sqrt есть особенность, связанная с тем, что она требует {}, а не обчные скобки ())
    [ ] реализовать операцию возведения в степень ( скорее всего она будет иметь тот же приоритет, что и *,/ )
    [ ] написать макросы для удобного добавления новых функций
    [x] добавить рекуретные функции копирования
    [ ] добавить функцию рекурентного дифференцирования
    [x] написать функции генерации теха учитывая стандартные функции sin,cos,tan,cot,ln
    [ ] написать генератор теха который будет понимать корни и степени
    [x] разнести весь код по отдельным файлам
    [x] прописать везде макросы, для отслеживания стека вызовов
    [x] дописать в некоторых местах Assert_c
    [x] конструктор копирования для класса Expression
*/



int main()
{
    initCallStack();
    loggerInit("log.log");
    $
    C_string line = "ln(100)/ln(10) *x + sin(x+10.0 + (5*3)/2) + tan(11.5)/x";
    Parser pr;
    Expression exprTree;
    exprTree.genTreeByRoot(pr.parse(line));
    exprTree.drawGraph("originalTree");
    exprTree.simplify();
    //exprTree.print();
    exprTree.drawGraph("simplifiedTree");
    exprTree.genTex();
    system("pause");
    $$
    loggerDestr();
    callStackDestr();
    return 0;
}